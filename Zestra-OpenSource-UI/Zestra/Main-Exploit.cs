using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Zestra.DLLSettings;

namespace Zestra
{
    public partial class Form1 : Form
    {
        Point lastPoint;
        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HT_CAPTION = 0x2;

        [DllImport("user32.dll")]
        public static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);

        [DllImport("user32.dll")]
        public static extern bool ReleaseCapture();

        private void FormMoveable_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                ReleaseCapture();
                SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        }

        public Form1()
        {
            InitializeComponent();
        }

        private void metroButton2_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void metroButton1_Click(object sender, EventArgs e)
        {
            WindowState = FormWindowState.Maximized;
        }

        private void Form1_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                this.Left += e.X - lastPoint.X;
                this.Top += e.Y - lastPoint.Y;
            }
        }

        private void Form1_MouseDown(object sender, MouseEventArgs e)
        {
            lastPoint = new Point(e.X, e.Y);
        }

        private void metroButton7_Click(object sender, EventArgs e)
        {
            fastColoredTextBox1.Clear();
        }

        private void metroButton5_Click(object sender, EventArgs e)
        {
            OpenFileDialog opendialogfile = new OpenFileDialog();
            opendialogfile.Filter = "Lua File (*.lua)|*.lua|Text File (*.txt)|*.txt";
            opendialogfile.FilterIndex = 2;
            opendialogfile.RestoreDirectory = true;
            if (opendialogfile.ShowDialog() != DialogResult.OK)
                return;
                fastColoredTextBox1.Text = "";
                System.IO.Stream stream;
                if ((stream = opendialogfile.OpenFile()) == null)
                    return;
                using (stream)
                    this.fastColoredTextBox1.Text = System.IO.File.ReadAllText(opendialogfile.FileName);
        }

        private void fastColoredTextBox1_Load(object sender, EventArgs e)
        {

        }

        private void metroButton4_Click(object sender, EventArgs e)
        {
            
            new DLLPipe().DLLExecute(fastColoredTextBox1.Text);
            
        }

        private void metroButton3_Click(object sender, EventArgs e)
        {
            if (File.Exists("Zestra.dll")) 
            {
                if (new DLLPipe().DLLIsInjected()) 
                {
                    MessageBox.Show("DLL is Already Attached (Pipe already exists)!", "DLL is Already Attached!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else 
                {
                    if (Process.GetProcessesByName("RobloxPlayerBeta").Length == 1)
                    {
                        new DLLInject().InitZestraDLL("Zestra.dll");
                    }
                    else
                    {
                        MessageBox.Show("Please Run Roblox & then Attach the DLL!", "Roblox is not Running!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            else 
            {
                MessageBox.Show("Please Disable Antivirus before Attaching Zestra!", "DLL is Missing!", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
    }
}
